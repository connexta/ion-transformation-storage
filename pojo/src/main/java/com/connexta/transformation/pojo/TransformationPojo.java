/**
 * Copyright (c) Connexta
 *
 * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of
 * the License, or any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public
 * License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 */
package com.connexta.transformation.pojo;

import com.connexta.transformation.pojo.unknown.UnknownTransformationPojo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.annotation.Nullable;

/**
 * This class provides a pojo implementation for the information and state associated with a
 * transformation capable of reloading all supported fields for all supported versions from
 * persistence. It also provides the capability of persisting back the fields based on the latest
 * version format.
 */
@JsonPropertyOrder({"clazz", "id", "version", "request_info", "start_time", "metadatas"})
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_NULL)
@JsonTypeInfo(
    use = Id.NAME,
    include = As.PROPERTY,
    property = "clazz",
    defaultImpl = UnknownTransformationPojo.class)
@JsonSubTypes(@Type(TransformationPojo.class))
@JsonTypeName("transformation")
public class TransformationPojo extends Pojo<TransformationPojo> {
  /**
   * Current version format.
   *
   * <p>Version history:
   *
   * <ul>
   *   <li>1 - initial version.
   * </ul>
   */
  public static final int CURRENT_VERSION = 1;

  /** The oldest version supported by the current code (anything before that will fail). */
  public static final int MINIMUM_VERSION = 1;

  @JsonProperty("request_info")
  @Nullable
  private RequestInfoPojo requestInfo;

  @JsonProperty("start_time")
  @Nullable
  private Instant startTime;

  @JsonProperty("metadatas")
  @JsonInclude(value = Include.NON_EMPTY, content = Include.NON_NULL)
  private List<MetadataPojo> metadatas = new ArrayList<>(5);

  /**
   * Gets information about the request that started this transformation.
   *
   * @return information about the request that started this transformation or <code>null</code> if
   *     none defined
   */
  @Nullable
  public RequestInfoPojo getRequestInfo() {
    return requestInfo;
  }

  /**
   * Gets information about the request that started this transformation.
   *
   * @param requestInfo information about the request that started this transformation
   * @return this for chaining
   */
  @Nullable
  public TransformationPojo setRequestInfo(RequestInfoPojo requestInfo) {
    this.requestInfo = requestInfo;
    return this;
  }

  /**
   * Gets the start time of the transformation.
   *
   * @return the time the transformation started or <code>null</code> if none defined
   */
  @Nullable
  public Instant getStartTime() {
    return startTime;
  }

  /**
   * Gets the start time of the transformation.
   *
   * @param startTime the time the transformation started
   * @return this for chaining
   */
  @Nullable
  public TransformationPojo setStartTime(Instant startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Gets the information for the different types of metadata that are generated by this
   * transformation.
   *
   * @return all the different types of metadata that are generated by this transformation or empty
   *     if it hasn't been determined yet
   */
  @Nullable
  public List<MetadataPojo> getMetadatas() {
    return metadatas;
  }

  /**
   * Gets the information for the different types of metadata that are generated by this
   * transformation.
   *
   * @return all the different types of metadata that are generated by this transformation or empty
   *     if it hasn't been determined yet
   */
  public Stream<MetadataPojo> metadatas() {
    return (metadatas != null) ? metadatas.stream() : Stream.empty();
  }

  /**
   * Sets the information for the different types of metadata that are generated by this
   * transformation.
   *
   * @param metadatas the different types of metadata that are generated by this transformation;
   *     <code>null</code> or empty if it hasn't been determined yet
   * @return this for chaining
   */
  public TransformationPojo setMetadatas(@Nullable List<MetadataPojo> metadatas) {
    this.metadatas = (metadatas != null) ? metadatas : new ArrayList<>(5);
    return this;
  }

  /**
   * Sets the information for the different types of metadata that are generated by this
   * transformation.
   *
   * @param metadatas the different types of metadata that are generated by this transformation or
   *     empty if it hasn't been determined yet
   * @return this for chaining
   */
  @JsonIgnore
  public TransformationPojo setMetadatas(Stream<MetadataPojo> metadatas) {
    this.metadatas = metadatas.collect(Collectors.toList());
    return this;
  }

  /**
   * Adds the information for a type of metadata that is generated by this transformation.
   *
   * @param metadata the type of metadata that is generated by this transformation
   * @return this for chaining
   */
  public TransformationPojo addMetadata(MetadataPojo metadata) {
    metadatas.add(metadata);
    return this;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), startTime, requestInfo, metadatas);
  }

  @Override
  public boolean equals(Object obj) {
    if (super.equals(obj) && (obj instanceof TransformationPojo)) {
      final TransformationPojo pojo = (TransformationPojo) obj;

      return Objects.equals(startTime, pojo.startTime)
          && Objects.equals(requestInfo, pojo.requestInfo)
          && Objects.equals(metadatas, pojo.metadatas);
    }
    return false;
  }

  @Override
  public String toString() {
    return String.format(
        "TransformationPojo[id=%s, version=%d, requestInfo=%s, startTime=%s, metadatas=%s]",
        getId(), getVersion(), requestInfo, startTime, metadatas);
  }
}
